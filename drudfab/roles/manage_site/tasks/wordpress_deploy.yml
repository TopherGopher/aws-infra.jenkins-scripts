---
# tasks file for project

- name: "Ensure files symlink exists in webroot/"
  file: >
    src="/var/www/{{ name }}/shared/uploads"
    dest="{{ webroot }}/current/docroot/content/uploads"
    state=link

- name: Ensure these directories exist
  file: path={{ item }} state=directory
  with_items:
    - "{{ archivedir }}/{{ name }}"

- name: S3 archive
  shell: "{{ archive_cmd }}"
  when: action == 'update'

- name: Copy wp-config.php
  command: "cp {{ webroot }}/shared/wp-config.php {{ webroot }}/current/docroot/wp-config.php"

- name: remove uploads
  file: >
    path="{{ webroot }}/shared/uploads"
    state=absent
  when: action == 'create'

- name: move archived uploads
  shell: "mv {{ archivedir }}/{{ name }}/*/content/uploads {{ webroot }}/shared/"
  args:
    creates: "{{ webroot }}/shared/uploads"
  when: action == 'create'

- name: DROP db
  mysql_db: >
    name="{{ nmdhosting['db_name'] }}"
    state=absent
    login_user="{{ nmdhosting['db_username'] }}"
    login_password="{{ nmdhosting['db_user_password'] }}"
    login_host="{{ nmdhosting['db_host'] }}"
  when: action == 'create'

- name: CREATE db
  mysql_db: >
    name="{{ nmdhosting['db_name'] }}"
    state=present
    login_user="{{ nmdhosting['db_username'] }}"
    login_password="{{ nmdhosting['db_user_password'] }}"
    login_host="{{ nmdhosting['db_host'] }}"
  when: action == 'create'

- name: import existing db
  mysql_db: >
    name="{{ nmdhosting['db_name'] }}"
    state=import
    login_user="{{ nmddb['dbcreate_user'] }}"
    login_password="{{ nmddb['dbcreate_user_password'] }}"
    login_host="{{ nmdhosting['db_host'] }}"
    target="{{ archivedir }}/{{ name }}/{{ name }}.sql"
  when: "(action == 'create') and not new_site"

- name: run permissions.sh
  shell: "{{ webroot }}/shared/permissions.sh"
  when: action == 'create' or action == 'update'

- name: composer install
  command: "composer -p5.5 install"
  args:
    chdir: "{{ webroot }}/current"

- name: wp core-install
  command: "{{ item }}"
  args:
    chdir: "{{ webroot }}/current"
  with_items:
    # install wordpress
    - "wp -p5.5 core install --url={{ nmdhosting['url'] }} --title={{ name }} --admin_user={{ nmdhosting['admin_username'] }}  --admin_password={{ nmdhosting['admin_password'] }}  --admin_email={{ nmdhosting['admin_mail'] }} --allow-root"
    # activate all plugins
    # - "wp -p5.5 plugin activate $( wp -p5.5 plugin list --format=csv --fields=name --quiet --allow-root ) --allow-root"
    # activate the theme
    - "wp -p5.5 theme activate {{ nmdhosting['active_theme'] }} --allow-root"
    # create/set G-Forms key
    - "wp -p5.5 option update rg_gforms_key {{ nmdhosting['gforms_key'] }} --allow-root"
    # create/set homepage
    - "wp -p5.5 option update show_on_front page --allow-root"
    # - "wp -p5.5 option update page_on_front $( wp -p5.5 post list --pagename=home --field=ID --allow-root ) --allow-root"
  when: "action == 'create' and new_site"

- name: search and replace
  command: "{{ search_replace }}"
  args:
    chdir: "{{ webroot }}/current"

- name: custom search and replace
  command: "wp -p5.5 search-replace {{ item }} {{ nmdhosting['url'] }} --all-tables --allow-root"
  args:
    chdir: "{{ webroot }}/current"
  with_items: "{{ nmdhosting['search_replace'] | default([]) }}"
  when: "nmdhosting['search_replace'] is defined"

- name: wp final setup commands
  ignore_errors: yes
  command: "{{ item }}"
  args:
    chdir: "{{ webroot }}/current"
  with_items:
    - "wp -p5.5 user update {{ nmdhosting['admin_username'] }} --user_pass={{ nmdhosting['admin_password'] }} --allow-root"
    # flush rewrite rules
    - "wp -p5.5 rewrite flush --allow-root"
    # flush cache
    - "wp -p5.5 cache flush --allow-root"
  when: action == 'create' or action == 'update'

- name: npm/bower setup commands
  ignore_errors: yes
  command: "{{ item }}"
  args:
    chdir: "{{ webroot }}/current"
  with_items:
    # get our npm/bower components loaded in
    - "npm install --unsafe-perms -s"
    - "bower install --allow-root --config.interactive=false"
  when: action == 'create' or action == 'update'

- name: check if grunt should be run
  stat: path="{{ webroot }}/current/Gruntfile.js"
  register: gruntfile
  when: action == 'create' or action == 'update'

- name: grunt stuff
  ignore_errors: yes
  command: "grunt dev"
  args:
    chdir: "{{ webroot }}/current"
  when: action == 'create' or action == 'update' and deploy_env == '_default' and gruntfile.stat.exists

- name: grunt stuff
  ignore_errors: yes
  command: "grunt build"
  args:
    chdir: "{{ webroot }}/current"
  when: action == 'create' or action == 'update' and deploy_env != '_default' and gruntfile.stat.exists

- name: reload nginx
  service: name=nginx state=reloaded
